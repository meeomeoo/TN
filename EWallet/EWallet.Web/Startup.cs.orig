using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using EWallet.Data.EF;
using EWallet.Data.Entities;
using EWallet.Data.EF.Implements;
using EWallet.Data.EF.Interfaces;
using EWallet.Service.Implements;
using EWallet.Service.Interfaces;
using Microsoft.Extensions.Logging;
using AutoMapper;
using EWallet.Data.Models.MyConfig;
using EWallet.Web.Helpers;

namespace EWallet.Web
{
    public class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true)
                .AddJsonFile("myconfig.json", optional: false, reloadOnChange: true)
                .AddEnvironmentVariables();
            Configuration = builder.Build();
        }

        public IConfiguration Configuration { get;  }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {

            services.Configure<CookiePolicyOptions>(options =>
            {
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.
                options.CheckConsentNeeded = context => true;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });

            services.AddDbContext<EWalletDbContext>(options =>
                options.UseSqlServer(
                    Configuration.GetConnectionString("DefaultConnection"),
                    o => o.MigrationsAssembly("EWallet.Data.EF")));

            services.AddHttpContextAccessor();

            // Configure Identity
            services.Configure<IdentityOptions>(options =>
            {
                // Password settings
                options.Password.RequireDigit = false;
                options.Password.RequiredLength = 6;
                options.Password.RequireNonAlphanumeric = false;
                options.Password.RequireUppercase = false;
                options.Password.RequireLowercase = false;

                // Lockout settings
                options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);
                options.Lockout.MaxFailedAccessAttempts = 10;
                options.Lockout.AllowedForNewUsers = true;

                // User settings
                options.User.RequireUniqueEmail = true;
            });

            services.ConfigureApplicationCookie(options =>
            {
                // Cookie settings
                options.Cookie.HttpOnly = true;
                options.ExpireTimeSpan = TimeSpan.FromMinutes(30);
                // If the LoginPath isn't set, ASP.NET Core defaults 
                // the path to /Account/Login.
                options.LoginPath = "/Account/Login";
                // If the AccessDeniedPath isn't set, ASP.NET Core defaults 
                // the path to /Account/AccessDenied.
                options.AccessDeniedPath = "/Account/AccessDenied";
                options.SlidingExpiration = true;
            });

            
            services.AddAutoMapper();
            services.AddIdentity<AppUser, AppRole>()
                .AddEntityFrameworkStores<EWalletDbContext>();

            // myconfig
            services.Configure<MyConfiguration>(Configuration.GetSection("MyConfig"));

            // cache
            services.AddMemoryCache();            

            services.AddMvc().AddSessionStateTempDataProvider().SetCompatibilityVersion(CompatibilityVersion.Version_2_1)
                .AddRazorPagesOptions(options =>
            {
                options.AllowAreas = true;
                options.Conventions.AuthorizeAreaFolder("Identity", "/Account/Manage");
                options.Conventions.AuthorizeAreaPage("Identity", "/Account/Logout");
            });
            services.AddDistributedMemoryCache();
            services.AddSession(o => {
                o.IdleTimeout = TimeSpan.FromMinutes(30);
                o.Cookie.HttpOnly = true;
                o.Cookie.Name = ".Appname.Session";
            });

            services.AddSingleton(Mapper.Configuration);
            services.AddTransient<IEmailSender, EmailSender>();
            services.AddTransient(typeof(IUnitOfWork), typeof(EFUnitOfWork));
            services.AddTransient(typeof(IRepository<,>), typeof(EFRepository<,>));
            services.AddScoped<UserManager<AppUser>, UserManager<AppUser>>();
            services.AddScoped<RoleManager<AppRole>, RoleManager<AppRole>>();
            services.AddScoped<DbInitializer, DbInitializer>();
            services.AddScoped<IUserClaimsPrincipalFactory<AppUser>, CustomClaimsPrincipalFactory>();
            services.AddTransient<ISmsHelper, SmsHelper>();
            services.AddTransient<ICurrencyService, CurrencyService>();
            services.AddTransient<ICountryService, CountryService>();
            services.AddTransient<IWalletService, WalletService>();
            services.AddTransient<IAppUserService, AppUserService>();
            services.AddTransient<IAdvertisementService, AdvertisementService>();
            services.AddTransient<IBlockchainService, BlockchainService>();
            services.AddTransient<IBankService, BankService>();
            //services.AddTransient<ITransactionService, TransactionsService>();

            // Register IHttpContextAccessor
            //services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
            services.AddTransient<MySessionManager>();
            //services.AddSession();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddFile("Logs/Log-{Date}.txt");

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();
            app.UseCookiePolicy();
            app.UseSession();
            app.UseAuthentication();

            app.UseMvc(routes =>
            {
           
                routes.MapRoute(
<<<<<<< HEAD
                    name: "advertisement_edit",
                    template: "/advertisement/edit/{id?}",
                    defaults: new { controller = "Advertisement", action = "Create" }
                );

                routes.MapRoute(
                    name: "advertisement_view",
                    template: "/advertisement/view/{id?}",
                    defaults: new { controller = "Advertisement", action = "Index" }
                );

                routes.MapRoute(
                    name: "advertisement_create",
                    template: "/advertisement/create",
                    defaults: new { controller = "Advertisement", action = "Create" }
=======
                    name: "Login",
                    template: "/login",
                    defaults: new {  controller = "Account", action = "Login" }
                );

                routes.MapRoute(
                    name: "Proceed",
                    template: "/proceed",
                    defaults: new { controller = "Account", action = "Proceed" }
                );
                routes.MapRoute(
                    name: "ConfirmEmail",
                    template: "/confirm",
                    defaults: new { controller = "Account", action = "ConfirmEmail" }
>>>>>>> bd8b808b8d47c04ba48885227a9cf0332d238655
                );


                routes.MapRoute(
                    name: "create_ad",
                    template: "/advertisement/create",
                    defaults: new { controller = "Advertisement", action = "Create" }
   
                );

                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}
